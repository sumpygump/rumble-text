#!/usr/bin/env php
<?php

// Find where the composer autoload is
// This tool was installed as a composed dependency or directly
$root = realpath(__DIR__);
$autoloadLocations = [
    __DIR__ . '/vendor.phar',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
];
foreach ($autoloadLocations as $file) {
    if (file_exists($file)) {
        define('APP_COMPOSER_AUTOLOAD', $file);
        break;
    }
}
// Composer autoload require guard
if (!defined('APP_COMPOSER_AUTOLOAD')) {
    die(
        "You must run the command `composer install` from the terminal "
        . "in the directory '$root' before using this tool.\n"
    );
}
// Load composer autoloader
require_once APP_COMPOSER_AUTOLOAD;

use RumbleText\RumbleText;

$types = [
    'string',
    'phrase',
    'sentence',
    'paragraph',
    'article',
    'word',
    'syllable',
    'name',
    'company',
    'website',
    'email',
    'digits',
    'phone',
    'address',
];

/**
 * Very simple arg parsing logic
 */
function parse_args($args, $types)
{
    $args = json_decode(json_encode($args));
    $settings = [
        'word_count' => null,
        'letterset' => RumbleText::LETTERSET_ORIGINAL,
        'type' => 'article',
    ];

    $program_name = array_shift($args);
    while (!empty($args)) {
        $arg = array_shift($args);

        if ($arg == '--help') {
            print "Rumble-text generates random text.\n";
            print "Usage: rumble-text [--letterset <letterset>] [--type <type>] [--chars <chars>] [wordcount|length]\n";
            print "  --letterset allows to select algorithm for probabilities of vowels and consonants to use\n";
            print "  --type allows to pick what type of entity to produce (whether string, word, name, paragraph, etc.)\n";
            print "  --chars is only used for type 'string', the format is a string of chars to pick from. e.g. --chars abcdef012\n";
            print "  some types use wordcount to output a certain number of words, and some types use length to specify character length\n";
            printf("\nValid lettersets:\n - %s\n", implode("\n - ", RumbleText::$lettersets));
            printf("\nValid types:\n - %s\n", implode("\n - ", $types));
            exit(0);
        }

        if ($arg == '--letterset' || $arg == '-l') {
            if (!isset($args[0])) {
                throw new \Exception(sprintf("Missing argument for option %s", $arg));
            }
            $settings['letterset'] = array_shift($args);
            if (!in_array($settings['letterset'], RumbleText::$lettersets)) {
                printf("Invalid letterset specified '%s'\n", $settings['letterset']);
                printf("Valid lettersets:\n - %s\n", implode("\n - ", RumbleText::$lettersets));
                exit(1);
            }
            continue;
        }

        if ($arg == '--type' || $arg == '-t') {
            if (!isset($args[0])) {
                throw new \Exception(sprintf("Missing argument for option %s", $arg));
            }
            $settings['type'] = array_shift($args);
            if (!in_array($settings['type'], $types)) {
                printf("Invalid type specified '%s'\n", $settings['type']);
                printf("Valid types:\n - %s\n", implode("\n - ", $types));
                exit(1);
            }
            continue;
        }

        if ($arg == '--chars' || $arg == '-c') {
            if (!isset($args[0])) {
                throw new \Exception(sprintf("Missing argument for option %s", $arg));
            }
            $settings['chars'] = array_shift($args);
            continue;
        }

        if ($arg[0] == '-' && (isset($arg[1]) && $arg[1] == '-')) {
            printf("Unexpected option '%s'\n", $arg);
            exit(1);
        }

        if ($arg[0] == '-') {
            printf("Unexpected flag '%s'\n", $arg);
            exit(1);
        }

        $settings['word_count'] = (int) $arg;
    }

    return $settings;
}

$settings = parse_args($argv, $types);

$rumble = new RumbleText($settings['letterset']);

switch ($settings['type']) {
case 'string':
    $length = $settings['word_count'] ?? 16;
    if (isset($settings['chars'])) {
        $words = $rumble->generateRandomString($length, $settings['chars']);
    } else {
        $words = $rumble->generateRandomString($length);
    }
    break;
case 'phrase':
    if ($settings['word_count']) {
        $words = $rumble->generateRandomPhrase($settings['word_count'], $settings['word_count']);
    } else {
        $words = $rumble->generateRandomPhrase();
    }
    break;
case 'sentence':
    if ($settings['word_count']) {
        $words = $rumble->generateRandomSentence($settings['word_count'], $settings['word_count']);
    } else {
        $words = $rumble->generateRandomSentence();
    }
    break;
case 'paragraph':
    $word_count = $settings['word_count'] ?? null;
    $words = $rumble->generateRandomParagraph(1, 20, $word_count);
    break;
case 'article':
    $word_count = $settings['word_count'] ?? 32;
    $words = $rumble->generateRandomArticle(1, 20, $word_count);
    break;
case 'word':
    $words = $rumble->generateRandomWord($settings['word_count']);
    break;
case 'syllable':
    $length = $settings['word_count'] ?? 1;
    $types = ["V", "CV", "VC", "CVC"];
    $words = '';
    for ($i = 0; $i < $length; $i++) {
        $type = $types[mt_rand(0, count($types)-1)];
        $words .= $rumble->generateSyllable($type) . ' ';
    }
    break;
case 'name':
    $words = $rumble->generateRandomName($settings['word_count']);
    break;
case 'company':
    print_r($settings);
    $words = $rumble->generateRandomCompany($settings['word_count']);
    break;
case 'website':
    $words = $rumble->generateRandomWebsite();
    break;
case 'email':
    $words = $rumble->generateRandomEmail();
    break;
case 'number': // passthru
case 'digits':
    if ($settings['word_count']) {
        $words = $rumble->generateRandomDigits(4, 16, $settings['word_count']);
    } else {
        $words = $rumble->generateRandomDigits();
    }
    break;
case 'phone':
    $words = $rumble->generateRandomPhone();
    break;
case 'address':
    $words = $rumble->generateRandomAddress();
    break;
}
printf("%s\n", wordwrap($words));

exit(0);
